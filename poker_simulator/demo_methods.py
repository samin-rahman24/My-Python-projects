#!/usr/bin/env python3

from poker import ExactProbabilityCalculator, parse_card

def demo_mathematical_methods():
    """Demonstrate the difference between exact and Monte Carlo methods."""
    
    print("üßÆ MATHEMATICAL METHODS COMPARISON")
    print("=" * 50)
    
    # Simple heads-up scenario with pocket aces
    player_cards = [parse_card("AS"), parse_card("AC")]
    community_cards = [parse_card("KH"), parse_card("QD"), parse_card("JS")]
    
    print(f"üìã Scenario: Pocket Aces vs 1 opponent")
    print(f"üÇ† Your cards: {' '.join(repr(card) for card in player_cards)}")
    print(f"üÇ° Community: {' '.join(repr(card) for card in community_cards)}")
    print()
    
    # Method 1: Exact Combinatorial Analysis
    print("üßÆ METHOD 1: EXACT COMBINATORIAL ANALYSIS")
    print("-" * 40)
    try:
        exact_result = ExactProbabilityCalculator.calculate_exact_probability(
            player_cards, community_cards, 1
        )
        if exact_result:
            print(f"‚úÖ EXACT RESULT:")
            print(f"   Win: {exact_result['win_probability']:.3f}%")
            print(f"   Tie: {exact_result['tie_probability']:.3f}%")
            print(f"   Lose: {exact_result['lose_probability']:.3f}%")
            print(f"   Based on: {exact_result['total_scenarios']:,} scenarios")
            print(f"   ‚≠ê Mathematically perfect - no approximation!")
    except Exception as e:
        print(f"‚ùå Exact method failed: {e}")
    
    print()
    
    # Method 2: Monte Carlo Simulation (multiple runs to show variance)
    print("üé≤ METHOD 2: MONTE CARLO SIMULATION")
    print("-" * 40)
    
    iterations_list = [1000, 10000, 100000]
    
    for iterations in iterations_list:
        mc_result = ExactProbabilityCalculator.monte_carlo_simulation(
            player_cards, community_cards, 1, iterations
        )
        print(f"üìä {iterations:,} simulations:")
        print(f"   Win: {mc_result['win_probability']:.3f}%")
        print(f"   Tie: {mc_result['tie_probability']:.3f}%")
        print(f"   Lose: {mc_result['lose_probability']:.3f}%")
        
        if exact_result:
            win_error = abs(mc_result['win_probability'] - exact_result['win_probability'])
            print(f"   Error: ¬±{win_error:.3f}% from exact value")
        print()

def explain_mathematical_superiority():
    """Explain why exact calculation is superior."""
    
    print("\nüéØ WHY EXACT CALCULATION IS SUPERIOR:")
    print("=" * 50)
    
    print("1. üéØ PERFECT ACCURACY")
    print("   ‚Ä¢ Exact: 100.000% accurate")
    print("   ‚Ä¢ Monte Carlo: ~99% accurate (with enough samples)")
    print()
    
    print("2. ‚ö° DETERMINISTIC RESULTS")
    print("   ‚Ä¢ Exact: Same result every time")
    print("   ‚Ä¢ Monte Carlo: Different results each run")
    print()
    
    print("3. üßÆ MATHEMATICAL RIGOR")
    print("   ‚Ä¢ Exact: Pure combinatorial mathematics")
    print("   ‚Ä¢ Monte Carlo: Statistical approximation")
    print()
    
    print("4. üìä COMPUTATIONAL EFFICIENCY (for small scenarios)")
    print("   ‚Ä¢ Exact: Counts all possibilities once")
    print("   ‚Ä¢ Monte Carlo: Samples repeatedly")
    print()
    
    print("5. ‚úÖ PROVABLE CORRECTNESS")
    print("   ‚Ä¢ Exact: Mathematically provable")
    print("   ‚Ä¢ Monte Carlo: Probabilistically correct")

def when_to_use_each_method():
    """Explain when to use each method."""
    
    print("\nü§î WHEN TO USE EACH METHOD:")
    print("=" * 50)
    
    print("üßÆ USE EXACT CALCULATION WHEN:")
    print("   ‚Ä¢ ‚â§2 opponents")
    print("   ‚Ä¢ ‚â§10 unknown cards total")
    print("   ‚Ä¢ <1M possible scenarios")
    print("   ‚Ä¢ Need perfect accuracy")
    print("   ‚Ä¢ Results will be used for research/theory")
    print()
    
    print("üé≤ USE MONTE CARLO WHEN:")
    print("   ‚Ä¢ >2 opponents")
    print("   ‚Ä¢ >10 unknown cards")
    print("   ‚Ä¢ >1M possible scenarios")
    print("   ‚Ä¢ Speed is more important than perfect accuracy")
    print("   ‚Ä¢ ~1% error margin is acceptable")
    print()
    
    print("üöÄ OUR HYBRID APPROACH:")
    print("   ‚Ä¢ Automatically chooses the best method")
    print("   ‚Ä¢ Exact when possible, Monte Carlo when necessary")
    print("   ‚Ä¢ Gives you mathematical precision OR speed")

if __name__ == "__main__":
    demo_mathematical_methods()
    explain_mathematical_superiority()
    when_to_use_each_method()
    
    print("\nüéâ CONCLUSION:")
    print("Our poker simulator uses the most mathematically rigorous")
    print("approach available, giving you perfect accuracy when possible!")
